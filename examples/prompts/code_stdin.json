[
    "{}\nYou should use `sys.stdin` to get input line by line from stdin. Implement a function called `main()` which orchastrates the solution by reading inputs from stdin and writing the answer to stdout. Feel free to use additional functions as necessary. Next do NOT forget to call `main` function at the end of the program otherwise you will not be awarded any points. Please wrap the code in a markdown code block, like this:\n```python\n# your code here\n```\n",
    "{}\nRead the input line-by-line from `sys.stdin`. Implement a `main()` function that handles reading from stdin, processing the data, and printing the output to stdout. You may define extra helper functions if needed. Make sure to invoke `main()` at the end. Present your code inside a Python markdown block like so:\n```python\n# code here\n```\n",
    "{}\nUsing `sys.stdin`, read the incoming data one line at a time. Write a function `main()` that coordinates reading the input, computing the result, and outputting it to stdout. You may add supporting functions for clarity. Ensure you call `main()` after its definition. Output your solution wrapped in:\n```python\n# code here\n```\n",
    "{}\nYour task is to use sys.stdin for reading input line-by-line. Create a main() function that manages reading the input, performing the required operations, and writing to stdout. Feel free to implement helper functions. Remember to execute main() at the end of the script. Put your code in a Python fenced code block, for example:\n```python\n# code here\n```\n",
    "{}\nPlease implement a main() function that uses sys.stdin to read lines of input and writes results to stdout. You can define additional helper functions if necessary. Call main() at the end. Your entire script should be shown in a Python markdown code fence:\n```python\n# code here\n```\n",
    "{}\nConstruct a Python script where `sys.stdin` is used to read input sequentially, line by line. Define a `main()` function that processes these inputs and outputs the result to stdout. Optionally, break the logic into helper functions. Don't forget to invoke `main()` in your code. Provide the complete program enclosed in:\n```python\n# code here\n```\n",
    "{}\nImplement a main() function that reads input line-by-line from sys.stdin, processes it, and writes output to stdout. Ensure main() is invoked. Present the complete solution within a Python code block.\n",
    "{}\nDefine `main()` to read from sys.stdin, produce the corresponding output, and print it to `stdout`. Invoke `main()` and enclose the full implementation in a fenced Python code block.\n",
    "{}\nCreate a main() function that consumes input from sys.stdin, performs the required computation, and outputs the result to stdout. Call main() and provide the complete program within a Python code fence.\n",
    "{}\nWrite a `main()` function to process data read line-by-line from `sys.stdin` and emit the result to `stdout`. Ensure the function is executed and the solution is encapsulated in a Python markdown fence.\n",
    "{}\nConstruct a `main()` function that acquires input from `sys.stdin`, computes the solution, and prints it to `stdout`. Invoke the function and enclose the entire code in a Python code block.\n",
    "{}\nUse `sys.stdin` to read input line-by-line. Implement `main()` to process input and print output, then call it. Wrap the full solution in:\n```python\n# code here\n```\n",
    "{}\nRead from sys.stdin line-by-line in main(), output to stdout, and call main(). Show the solution in a Python fenced block.\n",
    "{}\nCreate main() reading from sys.stdin and printing results. Call it. Provide the code in a fenced Python block.\n",
    "{}\nImplement main() using sys.stdin for input and stdout for output. Call it. Output the full script inside a Python markdown fence.\n",
    "{}\nWrite `main()` that reads from `sys.stdin`, processes input, and prints results. Call `main()` and present code in:\n```python\n# code here\n```\n"
]