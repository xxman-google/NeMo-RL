# == Task Spec ==
# Task name: arena_hard
# Prompt file: None
# System prompt file: None

# == Sample Rekeyed Data ==

# Example 1:
#   Category: hard_prompt
#   Subcategory: coding
#   Prompt: Write me a zig program that solves the following problem from advent of code and reads the input from a file input.txt and prints the answer to stdout.
# ```
# --- Day 25: Let It Snow ---
# Merry Christmas! Santa is booting up his weather machine; looks like you might get a white Christmas after all.

# The weather machine beeps! On the console of the machine is a copy protection message asking you to enter a code from the instruction manual. Apparently, it refuses to run unless you give it that code. No problem; you'll just look up the code in the--

# "Ho ho ho", Santa ponders aloud. "I can't seem to find the manual."

# You look up the support number for the manufacturer and give them a call. Good thing, too - that 49th star wasn't going to earn itself.

# "Oh, that machine is quite old!", they tell you. "That model went out of support six minutes ago, and we just finished shredding all of the manuals. I bet we can find you the code generation algorithm, though."

# After putting you on hold for twenty minutes (your call is very important to them, it reminded you repeatedly), they finally find an engineer that remembers how the code system works.

# The codes are printed on an infinite sheet of paper, starting in the top-left corner. The codes are filled in by diagonals: starting with the first row with an empty first box, the codes are filled in diagonally up and to the right. This process repeats until the infinite paper is covered. So, the first few codes are filled in in this order:

#    | 1   2   3   4   5   6  
# ---+---+---+---+---+---+---+
#  1 |  1   3   6  10  15  21
#  2 |  2   5   9  14  20
#  3 |  4   8  13  19
#  4 |  7  12  18
#  5 | 11  17
#  6 | 16
# For example, the 12th code would be written to row 4, column 2; the 15th code would be written to row 1, column 5.

# The voice on the other end of the phone continues with how the codes are actually generated. The first code is 20151125. After that, each code is generated by taking the previous one, multiplying it by 252533, and then keeping the remainder from dividing that value by 33554393.

# So, to find the second code (which ends up in row 2, column 1), start with the previous value, 20151125. Multiply it by 252533 to get 5088824049625. Then, divide that by 33554393, which leaves a remainder of 31916031. That remainder is the second code.

# "Oh!", says the voice. "It looks like we missed a scrap from one of the manuals. Let me read it to you." You write down his numbers:

#    |    1         2         3         4         5         6
# ---+---------+---------+---------+---------+---------+---------+
#  1 | 20151125  18749137  17289845  30943339  10071777  33511524
#  2 | 31916031  21629792  16929656   7726640  15514188   4041754
#  3 | 16080970   8057251   1601130   7981243  11661866  16474243
#  4 | 24592653  32451966  21345942   9380097  10600672  31527494
#  5 |    77061  17552253  28094349   6899651   9250759  31663883
#  6 | 33071741   6796745  25397450  24659492   1534922  27995004
# "Now remember", the voice continues, "that's not even all of the first few numbers; for example, you're missing the one at 7,1 that would come before 6,2. But, it should be enough to let your-- oh, it's time for lunch! Bye!" The call disconnects.

# Santa looks nervous. Your puzzle input contains the message on the machine's console. What code do you give the machine?
# ```
#   Baseline: {"uid": "2edbb5f36f5b42be", "ans_id": "f38aJfZL7nqdxxnoSwvmRc", "model": "o3-mini-2025-01-31", "messages": [{"role": "user", "content": "Write me a zig program that solves the following problem from advent of code and reads the input from a file input.txt and prints the answer to stdout.\n```\n--- Day 25: Let It Snow ---\nMerry Christmas! Santa is booting up his weather machine; looks like you might get a white Christmas after all.\n\nThe weather machine beeps! On the console of the machine is a copy protection message asking you to enter a code from the instruction manual. Apparently, it refuses to run unless you give it that code. No problem; you'll just look up the code in the--\n\n\"Ho ho ho\", Santa ponders aloud. \"I can't seem to find the manual.\"\n\nYou look up the support number for the manufacturer and give them a call. Good thing, too - that 49th star wasn't going to earn itself.\n\n\"Oh, that machine is quite old!\", they tell you. \"That model went out of support six minutes ago, and we just finished shredding all of the manuals. I bet we can find you the code generation algorithm, though.\"\n\nAfter putting you on hold for twenty minutes (your call is very important to them, it reminded you repeatedly), they finally find an engineer that remembers how the code system works.\n\nThe codes are printed on an infinite sheet of paper, starting in the top-left corner. The codes are filled in by diagonals: starting with the first row with an empty first box, the codes are filled in diagonally up and to the right. This process repeats until the infinite paper is covered. So, the first few codes are filled in in this order:\n\n   | 1   2   3   4   5   6  \n---+---+---+---+---+---+---+\n 1 |  1   3   6  10  15  21\n 2 |  2   5   9  14  20\n 3 |  4   8  13  19\n 4 |  7  12  18\n 5 | 11  17\n 6 | 16\nFor example, the 12th code would be written to row 4, column 2; the 15th code would be written to row 1, column 5.\n\nThe voice on the other end of the phone continues with how the codes are actually generated. The first code is 20151125. After that, each code is generated by taking the previous one, multiplying it by 252533, and then keeping the remainder from dividing that value by 33554393.\n\nSo, to find the second code (which ends up in row 2, column 1), start with the previous value, 20151125. Multiply it by 252533 to get 5088824049625. Then, divide that by 33554393, which leaves a remainder of 31916031. That remainder is the second code.\n\n\"Oh!\", says the voice. \"It looks like we missed a scrap from one of the manuals. Let me read it to you.\" You write down his numbers:\n\n   |    1         2         3         4         5         6\n---+---------+---------+---------+---------+---------+---------+\n 1 | 20151125  18749137  17289845  30943339  10071777  33511524\n 2 | 31916031  21629792  16929656   7726640  15514188   4041754\n 3 | 16080970   8057251   1601130   7981243  11661866  16474243\n 4 | 24592653  32451966  21345942   9380097  10600672  31527494\n 5 |    77061  17552253  28094349   6899651   9250759  31663883\n 6 | 33071741   6796745  25397450  24659492   1534922  27995004\n\"Now remember\", the voice continues, \"that's not even all of the first few numbers; for example, you're missing the one at 7,1 that would come before 6,2. But, it should be enough to let your-- oh, it's time for lunch! Bye!\" The call disconnects.\n\nSanta looks nervous. Your puzzle input contains the message on the machine's console. What code do you give the machine?\n```"}, {"role": "assistant", "content": {"answer": "Below is one acceptable Zig solution. This program reads the entire contents of \"input.txt\" (which is expected to contain at least two numbers \u2013 the target row and column), extracts the two u64 numbers from the file, computes the number of steps in the \u201cdiagonal\u201d order, and then uses modular exponentiation so that\n\n\u2003\u2003code = (20151125 * (252533 ^ steps mod 33554393)) mod 33554393\n\nIt then prints the answer to stdout.\n\nYou can compile this with Zig and run it.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// main.zig\nconst std = @import(\"std\");\n\n// This is a fast modular exponentiation function.\nfn modExp(base: u64, exp: u64, mod: u64) u64 {\n    var result: u64 = 1;\n    var b = base % mod;\n    var e = exp;\n    while (e > 0) : (e /= 2) {\n        if ((e & 1) != 0) {\n            result = (result * b) % mod;\n        }\n        b = (b * b) % mod;\n    }\n    return result;\n}\n\npub fn main() !void {\n    const allocator = std.heap.page_allocator;\n\n    // Open and read the whole file \"input.txt\"\n    var file = try std.fs.cwd().openFile(\"input.txt\", .{ .read = true });\n    var input = try file.readToEndAlloc(allocator, 8192);\n    defer allocator.free(input);\n\n    // The input should include the two numbers (row and column). For example:\n    // \"To continue, please enter the code at row 2981, column 3075.\"\n    // We'll now extract the two numbers from the input.\n    var numbers: [2]u64 = undefined;\n    var numberIndex: usize = 0;\n    var i: usize = 0;\n    while (i < input.len) : (i += 1) {\n        if (input[i] >= '0' and input[i] <= '9') {\n            const start = i;\n            while (i < input.len and input[i] >= '0' and input[i] <= '9') : (i += 1) {}\n            const numStr = input[start .. i];\n            const num = try std.fmt.parseInt(u64, numStr, 10);\n            if (numberIndex < numbers.len) {\n                numbers[numberIndex] = num;\n                numberIndex += 1;\n            }\n            if (numberIndex == numbers.len) break;\n            continue;\n        }\n    }\n    if (numberIndex != numbers.len) {\n        return error(\"Expected two numbers (row and column) in the input file\");\n    }\n    const row = numbers[0];\n    const col = numbers[1];\n\n    // The codes are filled in diagonals.\n    // For a given cell (row, col) the diagonal number is:\n    //   diag = row + col - 1\n    // In that diagonal the cells are visited starting from\n    //   (diag,1), (diag-1,2), \u2026, (1,diag)\n    // Hence the number of steps (starting at 0 for the first code) is:\n    //   steps = sum_{i=1}^{diag-1} i + (diag - row)\n    const diag = row + col - 1;\n    const steps: u64 = ((diag - 1) * diag) / 2 + (diag - row);\n\n    // Now compute the code using the recurrence:\n    //   first code = 20151125\n    //   next = (previous * 252533) % 33554393\n    // If we \u201cjump\u201d ahead by N steps then the code is:\n    //   code = 20151125 * (252533^steps mod 33554393) mod 33554393\n    const initial: u64 = 20151125;\n    const multiplier: u64 = 252533;\n    const mod: u64 = 33554393;\n\n    const factor = modExp(multiplier, steps, mod);\n    const code = (initial * factor) % mod;\n\n    std.debug.print(\"{d}\\n\", .{code});\n}\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nExplanation of the major parts:\n\n1. Reading the file: We open \"input.txt\" in the current working directory and read its whole contents.\n2. Parsing Numbers: We scan the input for sequences of characters that are digits and parse them as u64 values. We expect the first two numbers to be the row and column.\n3. Finding the Sequence Index: We calculate the \u201cdiagonal number\u201d as row + col \u2013 1 and then determine the number of steps before reaching position (row, col) by summing all the codes in previous diagonals plus the offset inside the current diagonal.\n4. Modular Exponentiation: Rather than simulating many iterations, we compute the required power (252533 raised to the number of steps modulo 33554393) quickly.\n5. Printing the Code: Finally, we compute the code and print it to standard output.\n\nCompile this file with Zig (for example, with \u201czig build-exe main.zig\u201d) and run the resulting executable. Make sure your \u201cinput.txt\u201d is in the same directory as the executable.\n\nThis solution meets the problem requirements from Advent of Code\u2019s Day 25."}}], "tstamp": 1744155096.6196108, "metadata": {"token_len": 1131, "header_count": {"h1": 0, "h2": 0, "h3": 0, "h4": 0, "h5": 0, "h6": 0}, "list_count": {"ordered": 5, "unordered": 0}, "bold_count": {"**": 0, "__": 0}}}

# Example 2:
#   Category: hard_prompt
#   Subcategory: coding
#   Prompt: please write a python script that takes a .mp4 file and outputs screenshots taken 10s apart
#   Baseline: {"uid": "ec71c09662a64365", "ans_id": "36KDAqsoFqUeMFoVJkXgGN", "model": "o3-mini-2025-01-31", "messages": [{"role": "user", "content": "please write a python script that takes a .mp4 file and outputs screenshots taken 10s apart"}, {"role": "assistant", "content": {"answer": "Below is an example Python script that uses OpenCV to extract a screenshot (frame) every 10 seconds from an input .mp4 video file. Before running the script, install OpenCV with:\n\n\u2003\u2003pip install opencv-python\n\nSave the script (for example, as extract_screenshots.py), and run it from the command line.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n#!/usr/bin/env python3\nimport cv2\nimport os\nimport sys\nimport argparse\n\ndef extract_screenshots(video_path, output_dir, interval=10):\n    # Open the video file\n    cap = cv2.VideoCapture(video_path)\n    if not cap.isOpened():\n        print(f\"Error opening video file: {video_path}\")\n        return\n\n    # Get video properties\n    fps = cap.get(cv2.CAP_PROP_FPS)\n    if fps == 0:\n        print(\"Error reading FPS from video.\")\n        cap.release()\n        return\n\n    total_frames = cap.get(cv2.CAP_PROP_FRAME_COUNT)\n    duration = total_frames / fps\n    print(f\"Video Duration: {duration:.2f} seconds, FPS: {fps:.2f}, Total Frames: {int(total_frames)}\")\n    \n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    current_time = 0\n    screenshot_count = 0\n    \n    while current_time < duration:\n        # Set video position in milliseconds\n        cap.set(cv2.CAP_PROP_POS_MSEC, current_time * 1000)\n        ret, frame = cap.read()\n        \n        if not ret:\n            print(f\"Failed to read frame at {current_time}s.\")\n            break\n\n        output_filename = os.path.join(output_dir, f\"screenshot_{screenshot_count:04d}.jpg\")\n        cv2.imwrite(output_filename, frame)\n        print(f\"Saved {output_filename} (time={current_time}s)\")\n        \n        screenshot_count += 1\n        current_time += interval\n\n    cap.release()\n    print(\"Finished extracting screenshots.\")\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Extract screenshots from a .mp4 video every N seconds.\")\n    parser.add_argument(\"video_file\", help=\"Path to the input .mp4 file\")\n    parser.add_argument(\"-o\", \"--output_dir\", default=\"screenshots\", help=\"Directory to save screenshots (default: screenshots)\")\n    parser.add_argument(\"-i\", \"--interval\", type=int, default=10, help=\"Interval in seconds between screenshots (default: 10)\")\n    args = parser.parse_args()\n\n    if not os.path.isfile(args.video_file):\n        print(f\"Input file does not exist: {args.video_file}\")\n        sys.exit(1)\n\n    extract_screenshots(args.video_file, args.output_dir, args.interval)\n\nif __name__ == \"__main__\":\n    main()\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nHow the script works:\n1. It uses cv2.VideoCapture to open the video.\n2. It calculates the duration from the total number of frames and FPS.\n3. It loops through the video every 10 seconds (or a user-specified interval) by setting the position (in milliseconds) and reading a frame.\n4. It writes each extracted frame as a JPEG image to the specified output directory.\n\nTo run the script, use a command similar to:\n\u2003\u2003python extract_screenshots.py input_video.mp4 -o output_folder -i 10\n\nThis will save screenshots every 10 seconds in the \u201coutput_folder\u201d directory."}}], "tstamp": 1744155061.5441136, "metadata": {"token_len": 713, "header_count": {"h1": 0, "h2": 0, "h3": 0, "h4": 0, "h5": 0, "h6": 0}, "list_count": {"ordered": 4, "unordered": 0}, "bold_count": {"**": 0, "__": 2}}}

# Example 3:
#   Category: hard_prompt
#   Subcategory: coding
#   Prompt: <div style="width: 100vh; height: 100vh;">
#     <img src="img/world.png">
#   </div>

# How do i center the child divs on both vertically and horizontally but only using the parent css?
#   Baseline: {"uid": "d5cdf24c4e614beb", "ans_id": "KbuSx2uwjaPGgaYB4u9CFc", "model": "o3-mini-2025-01-31", "messages": [{"role": "user", "content": "<div style=\"width: 100vh; height: 100vh;\">\n    <img src=\"img/world.png\">\n  </div>\n\nHow do i center the child divs on both vertically and horizontally but only using the parent css?"}, {"role": "assistant", "content": {"answer": "You can use flexbox on the parent element to center its children both vertically and horizontally. For example, update the parent\u2019s CSS like this:\n\n<style>\n  div {\n    width: 100vh;\n    height: 100vh;\n    display: flex;\n    justify-content: center; /* centers horizontally */\n    align-items: center;     /* centers vertically */\n  }\n</style>\n\nThis way the child (in your case the <img> element inside the div) will be perfectly centered without needing to alter its own CSS."}}], "tstamp": 1744155074.0867386, "metadata": {"token_len": 108, "header_count": {"h1": 0, "h2": 0, "h3": 0, "h4": 0, "h5": 0, "h6": 0}, "list_count": {"ordered": 0, "unordered": 0}, "bold_count": {"**": 0, "__": 0}}}

# Example 4:
#   Category: hard_prompt
#   Subcategory: coding
#   Prompt: Expand the following LLM prompt to detect tabular data too. cise title that encapsulates the main theme of the summary. Aim for 6-12 words.
# 7. Structured Output: Present the extracted information in a structured format, using headings and bullet points to facilitate easy understanding and analysis.

# Output Format:
# - Is a Diagram: [true/false]
# - Diagram Type: [Type of Diagram]
# - Key Elements:
#   - [Description/Label]
# - Relationships:
#   - [Description, including elements and type of connection]
# - Functionalities:
#   - [Description, including associated element(s)]
# - Summary: [Brief Summary of the Diagram's Purpose and Context]
# - Title: [Title of Diagram]
#   Baseline: {"uid": "dfc9be7c176d46bb", "ans_id": "DaNaJ8ZYXCjASZ5pXanDoM", "model": "o3-mini-2025-01-31", "messages": [{"role": "user", "content": "Expand the following LLM prompt to detect tabular data too. cise title that encapsulates the main theme of the summary. Aim for 6-12 words.\n7. Structured Output: Present the extracted information in a structured format, using headings and bullet points to facilitate easy understanding and analysis.\n\nOutput Format:\n- Is a Diagram: [true/false]\n- Diagram Type: [Type of Diagram]\n- Key Elements:\n  - [Description/Label]\n- Relationships:\n  - [Description, including elements and type of connection]\n- Functionalities:\n  - [Description, including associated element(s)]\n- Summary: [Brief Summary of the Diagram's Purpose and Context]\n- Title: [Title of Diagram]"}, {"role": "assistant", "content": {"answer": "Below is the expanded version of your LLM prompt, now enhanced to also detect tabular data. The revised prompt instructs the model to identify if the content includes diagrams, tables, or both. For each detected type, the prompt requires the extraction of key components such as elements, relationships, functionalities, and a concise title summarizing the overall theme (6\u201312 words). The output should follow a structured format with clearly labeled sections. You may provide the output as follows:\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nPrompt Instructions:\n\n1. Detection:\n   - Analyze the given content to determine if it represents a diagram, tabular data, or both.\n   - For diagrams, identify their type, key visual elements, relationships, and functionalities.\n   - For tabular data, identify the table type (e.g., data table, pivot table, schedule), header labels, key columns or rows, and any relational or computed data.\n\n2. Extraction:\n   - For each content type present (diagram and/or table), extract:\n     \u2022 Key Elements \u2013 A list of the primary components (nodes, elements, or data fields).\n     \u2022 Relationships \u2013 How elements connect with one another (including connections between rows/columns for tables).\n     \u2022 Functionalities \u2013 Specific functions or roles of each element (or group of elements) present in the diagram or table.\n  \n3. Summary and Title:\n   - Provide a brief overall summary of the purpose and context of the content.\n   - Generate a concise title that encapsulates the main theme of the summary. Aim for 6\u201312 words.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nOutput Format:\n\n- Is a Diagram: [true/false]\n- Diagram Type: [Type of Diagram (if applicable)]\n- Diagram Key Elements:\n  - [Description/Label]\n- Diagram Relationships:\n  - [Description, including elements and type of connection]\n- Diagram Functionalities:\n  - [Description, including associated element(s)]\n  \n- Is Tabular Data: [true/false]\n- Table Type: [Type of Table (if applicable)]\n- Table Headers/Key Columns:\n  - [Description/Label]\n- Table Relationships (if applicable):\n  - [Description of relational or computed data between rows/columns]\n- Table Functionalities (if applicable):\n  - [Description, including associated element(s)]\n  \n- Summary: [Brief summary of the content\u2019s purpose and context]\n- Title: [Concise title (6\u201312 words) encapsulating the main theme]\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nUsage Guidance:\n\n\u2022 Process the given content and determine which sections to fill based on the detection (diagram, tabular data, or both).\n\u2022 If the content primarily represents one type, mark the other as false and remain empty or provide an appropriate null response.\n\u2022 Ensure the title is clear and succinct, conveying the overall theme in 6 to 12 words.\n\u2022 Organize your output under the headings provided, using bullet points for clarity.\n\nThis expanded prompt now guides the model in detecting and summarizing both diagrams and tabular data with a structured output that enhances analysis and understanding."}}], "tstamp": 1744155066.9517105, "metadata": {"token_len": 619, "header_count": {"h1": 0, "h2": 0, "h3": 0, "h4": 0, "h5": 0, "h6": 0}, "list_count": {"ordered": 3, "unordered": 24}, "bold_count": {"**": 0, "__": 0}}}

# Example 5:
#   Category: hard_prompt
#   Subcategory: coding
#   Prompt: write a script that will generate glowing text with a rainbow color animated gradient border around the glowing text. using CSS and HTML
#   Baseline: {"uid": "666d2acdd7d64e17", "ans_id": "VAmyRxnrZ8yqyPLKFQufuc", "model": "o3-mini-2025-01-31", "messages": [{"role": "user", "content": "write a script that will generate glowing text with a rainbow color animated gradient border around the glowing text. using CSS and HTML"}, {"role": "assistant", "content": {"answer": "Below is an example of an HTML file with embedded CSS that creates glowing text with an animated rainbow gradient border. You can copy and paste this code into a new HTML file and open it in your browser to see it in action.\n\n------------------------------------------------------------\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Glowing Rainbow Text</title>\n    <style>\n      /* Base page styles */\n      body {\n        background-color: #000;\n        margin: 0;\n        height: 100vh;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      /* Container for the text and its rainbow border */\n      .rainbow-border {\n        position: relative;\n        padding: 10px;\n        border-radius: 12px;\n        /* Use a gradient background that will later simulate a border */\n        background: linear-gradient(45deg, red, orange, yellow, green, blue, indigo, violet);\n        background-size: 400%;\n        animation: animateRainbow 8s ease-in-out infinite;\n      }\n\n      /* The glowing text */\n      .glowing-text {\n        color: #fff;\n        font-size: 3rem;\n        font-weight: bold;\n        padding: 20px;\n        text-align: center;\n        border-radius: 8px;\n        background: #000;\n        /* Multiple text shadows to give a glowing effect */\n        text-shadow: \n          0 0 5px rgba(255, 255, 255, 0.8),\n          0 0 10px rgba(255, 255, 255, 0.8),\n          0 0 20px rgba(255, 0, 255, 0.8),\n          0 0 30px rgba(255, 0, 255, 0.8),\n          0 0 40px rgba(255, 0, 255, 0.8);\n      }\n\n      /* Keyframe animation for the animated gradient border */\n      @keyframes animateRainbow {\n        0% {\n          background-position: 0% 50%;\n        }\n        50% {\n          background-position: 100% 50%;\n        }\n        100% {\n          background-position: 0% 50%;\n        }\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"rainbow-border\">\n      <div class=\"glowing-text\">\n        Glowing Rainbow Text\n      </div>\n    </div>\n  </body>\n</html>\n------------------------------------------------------------\n\nHow It Works:\n\n1. The body is styled to center the content on a black background.\n2. The container div (.rainbow-border) uses a linear gradient background that has multiple colors (red, orange, yellow, green, blue, indigo, violet) and is animated with the keyframes to create a shifting (rainbow) effect.\n3. The actual text (.glowing-text) is styled with a black background so that the animated gradient shows as a border around it. The text uses multiple text-shadow layers to create a glowing effect.\n4. The border appearance is simulated by the padding around the text inside the rainbow-border container.\n\nFeel free to experiment with the animation duration, colors, or text-shadow values to customize the effect further!"}}], "tstamp": 1744155062.9867182, "metadata": {"token_len": 699, "header_count": {"h1": 0, "h2": 0, "h3": 0, "h4": 0, "h5": 0, "h6": 0}, "list_count": {"ordered": 4, "unordered": 0}, "bold_count": {"**": 0, "__": 0}}}

python -m tests.functional.test_arena_hard_dataset
